package com.bobbyesp.appmodules.core.objects.ui_components

import com.squareup.moshi.JsonClass
import dev.zacsweers.moshix.sealed.annotations.DefaultObject
import dev.zacsweers.moshix.sealed.annotations.TypeLabel

@JsonClass(generateAdapter = true, generator = "sealed:id")
sealed class UiComponent {
  // HOME

  @TypeLabel("home:shortSectionHeader", alternateLabels = ["home:sectionHeader", "home:encoreSectionHeader"])
  object HomeShortSectionHeader: UiComponent()

  @TypeLabel("home:tappableSectionHeader")
  object HomeLargeSectionHeader: UiComponent()

  @TypeLabel("home:shortcutsContainer")
  object ShortcutsContainer: UiComponent(), ComponentInGrid

  @TypeLabel("home:shortcutsCard")
  object ShortcutsCard: UiComponent()

  @TypeLabel("home:singleFocusCard")
  object SingleFocusCard: UiComponent()

  @TypeLabel("artist:likedSongsRow")
  object ArtistLikedSongs: UiComponent()

  @TypeLabel("listeninghistory:playlistContextRow", alternateLabels = ["listeninghistory:collectionContextRow", "listeninghistory:albumContextRow"])
  object HistoryPlaylist: UiComponent()

  @TypeLabel("listeninghistory:dividerAfterPlaysFromContextRow")
  object HistoryDivider: UiComponent()

  // BROWSE
  @TypeLabel("find:categoryCard")
  object FindCard: UiComponent(), ComponentInGrid

  // GLUE

  @TypeLabel("glue:sectionHeader")
  object GlueSectionHeader: UiComponent()

  @TypeLabel("home:carousel", alternateLabels = ["glue:carousel", "glue2:carousel"])
  object Carousel: UiComponent()

  @TypeLabel("home:cardMedium", alternateLabels = ["glue2:card"])
  object MediumCard: UiComponent(), ComponentInGrid

  @TypeLabel("consumerMobile:albumTrackRow")
  object AlbumTrackRow: UiComponent()

  @TypeLabel("consumerMobile:artistTrackRow")
  object ArtistTrackRow: UiComponent()

  @TypeLabel("artist:pinnedItem")
  object ArtistPinnedItem: UiComponent()

  @TypeLabel("glue:textRow")
  object TextRow: UiComponent()

  @TypeLabel("glue2:imageRow")
  object ImageRow: UiComponent()

  @TypeLabel("freetier:entityTopContainer")
  object AlbumHeader: UiComponent()

  @TypeLabel("header:fullBleed")
  object ArtistHeader: UiComponent()

  @TypeLabel("freetier:largerRow")
  object LargerRow: UiComponent()

  // BUTTONS

  @TypeLabel("freetier:tertiaryButtonOutlined", alternateLabels = ["find:tertiaryButton"])
  object OutlinedButton: UiComponent()

  // SYNTH (components that are generated by the application without any chance to receive from API, "synthetic")

  @TypeLabel("synth:playlistHeader")
  object PlaylistHeader: UiComponent()

  @TypeLabel("synth:playlistHeaderLarge")
  object LargePlaylistHeader: UiComponent()

  @TypeLabel("synth:playlistTrackRow", alternateLabels = ["listeninghistory:trackRow"])
  object PlaylistTrackRow: UiComponent()

  @TypeLabel("synth:collectionHeader")
  object CollectionHeader: UiComponent()

  @TypeLabel("synth:showHeader")
  object ShowHeader: UiComponent()

  @TypeLabel("synth:showTopics")
  object PodcastTopics: UiComponent()

  @TypeLabel("synth:episodeItem")
  object EpisodeListItem: UiComponent()

  // IGNORING

  @TypeLabel("listeninghistory:dividerAfterEntityRow", alternateLabels = ["listeninghistory:playsFromContextRow", "listeninghistory:artistContextRow" /*This by the moment*/])
  object EmptySpace: UiComponent()

  @TypeLabel("freetier:offlineSwitchComponent", alternateLabels = ["find:header", "find:imageHeader", "glue2:sectionHeader"])
  object Ignored: UiComponent()

  @DefaultObject
  object Unknown: UiComponent()
}

interface ComponentInGrid

fun UiComponent.isGrid() = this is ComponentInGrid